#!/bin/bash

set -e

issh2_dir="$PWD/iSSH2"
libgit2_dir="$PWD/libgit2"

ios_min_version=11.0.0
macos_min_version=10.13.0

build_macosx=true
build_iphoneos=true
build_iphonesimulator=true

declare -a cmake_configure_opts

build_and_install() {
  local platform=$1
  local build_dir=$2
  local build_log=$2/build.log
  echo -n "Building $platform..."
  trap 'echo " failed. ($build_log)"' ERR
  cmake --build "$build_dir" --target install >"$build_log"
  trap - ERR
  echo " done."
}

cmake_configure() {
  local build_dir=$1; shift
  pushd &>/dev/null "$build_dir"
  cmake "${cmake_configure_opts[@]}" "$libgit2_dir" \
    -DBUILD_CLAR:BOOL=OFF \
    -DBUILD_SHARED_LIBS:BOOL=OFF \
    -DREGEX_BACKEND=builtin \
    -DCMAKE_C_FLAGS=-fembed-bitcode \
    -DCMAKE_INSTALL_PREFIX="Products" \
    "$@"
  popd &>/dev/null
}

cmake_prefix() {
  local platform=$1
  echo "$issh2_dir/libssh2_$platform;$issh2_dir/openssl_$platform"
}

create_xcframework() {
  local output=$1; shift
  declare -a opts

  for prefix; do
    opts+=(-library "$prefix"/lib/libgit2.a -headers "$prefix"/include)
  done

  rm -rf "$output"
  xcodebuild -create-xcframework -output "$output" "${opts[@]}"
}

issh2() {
  "$issh2_dir"/iSSH2.sh "$@"
}

xcode_arch_sysroots() {
  local platform=$1; shift
  local archs=("$@")

  local sysroot
  sysroot="$(xcrun --sdk "$platform" --show-sdk-path)"

  local arch_sysroots=("${archs[@]/*/$sysroot}")
  local IFS=";"
  echo "${arch_sysroots[*]}"
}

# ============================================================================ #

build_openssl() {
  mkdir -p .build/OpenSSL
  pushd &>/dev/null .build/OpenSSL

  if [[ $build_macosx == true ]]; then
    issh2 --no-clean --platform=macosx --archs="arm64 x86_64" --min-version="$macos_min_version"
    mkdir -p macosx/lib
    libtool -static -o macosx/lib/libOpenSSL.a "$issh2_dir"/openssl_macosx/lib/*.a
  fi

  if [[ $build_iphoneos == true ]]; then
    issh2 --no-clean --platform=iphoneos --archs=arm64 --min-version="$ios_min_version"
    mkdir -p iphoneos/lib
    libtool -static -o iphoneos/lib/libOpenSSL.a "$issh2_dir"/openssl_iphoneos/lib/*.a
  fi

  if [[ $build_iphonesimulator == true ]]; then
    issh2 --no-clean --platform=iphonesimulator --archs="arm64 x86_64" --min-version="$ios_min_version"
    mkdir -p iphonesimulator/lib
    libtool -static -o iphonesimulator/lib/libOpenSSL.a "$issh2_dir"/openssl_iphonesimulator/lib/*.a
  fi

  rm -rf ../OpenSSL.xcframework
  xcodebuild -create-xcframework \
    -output ../OpenSSL.xcframework \
    -library macosx/lib/*.a \
    -headers "$issh2_dir"/openssl_macosx/include \
    -library iphoneos/lib/*.a \
    -headers "$issh2_dir"/openssl_iphoneos/include \
    -library iphonesimulator/lib/*.a \
    -headers "$issh2_dir"/openssl_iphonesimulator/include

  popd &>/dev/null

  rm -rf .build/libssh2.xcframework
  xcodebuild -create-xcframework \
    -output .build/libssh2.xcframework \
    -library "$issh2_dir"/libssh2_macosx/lib/libssh2.a \
    -headers "$issh2_dir"/libssh2_macosx/include \
    -library "$issh2_dir"/libssh2_iphoneos/lib/libssh2.a \
    -headers "$issh2_dir"/libssh2_iphoneos/include \
    -library "$issh2_dir"/libssh2_iphonesimulator/lib/libssh2.a \
    -headers "$issh2_dir"/libssh2_iphonesimulator/include
}

# ============================================================================ #

build_libgit2() {
  if [[ $build_macosx == true ]]; then
    build_dir=.build/libgit2/macosx
    configure_log=$build_dir/configure.log
    mkdir -p "$build_dir"

    echo -n "Configuring macosx..."
    trap ' failed. ($configure_log)' ERR
    cmake_configure "$build_dir" \
      -DCMAKE_PREFIX_PATH="$(cmake_prefix macosx)" \
      -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
      -DCMAKE_OSX_DEPLOYMENT_TARGET="$macos_min_version" \
      -DCMAKE_OSX_SYSROOT=macosx \
      >"$configure_log"
    trap - ERR
    echo " done."

    build_and_install macosx "$build_dir"
  fi

  if [[ $build_iphoneos == true ]]; then
    build_dir=.build/libgit2/iphoneos
    configure_log=$build_dir/configure.log
    mkdir -p "$build_dir"

    echo -n "Configuring iphoneos..."
    trap ' failed. ($configure_log)' ERR
    cmake_configure "$build_dir" \
      -DCMAKE_PREFIX_PATH="$(cmake_prefix iphoneos)" \
      -DCMAKE_C_COMPILER_WORKS:BOOL=ON \
      -DCMAKE_OSX_ARCHITECTURES=arm64 \
      -DCMAKE_OSX_DEPLOYMENT_TARGET="$ios_min_version" \
      -DCMAKE_OSX_SYSROOT=iphoneos \
      >"$configure_log"
    trap - ERR
    echo " done."

    build_and_install iphoneos "$build_dir"
  fi

  if [[ $build_iphonesimulator == true ]]; then
    build_dir=.build/libgit2/iphonesimulator
    configure_log=$build_dir/configure.log
    mkdir -p "$build_dir"

    echo -n "Configuring iphonesimulator..."
    trap ' failed. ($configure_log)' ERR
    cmake_configure "$build_dir" \
      -DCMAKE_PREFIX_PATH:PATH="$(cmake_prefix iphonesimulator)" \
      -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
      -DCMAKE_OSX_DEPLOYMENT_TARGET="$ios_min_version" \
      -DCMAKE_OSX_SYSROOT=iphonesimulator \
      >"$configure_log"
    trap - ERR
    echo " done."

    build_and_install iphonesimulator "$build_dir"
  fi

  # build xcframework

  create_xcframework .build/libgit2.xcframework .build/libgit2/*/Products
}

# ============================================================================ #

for opt; do
  case $opt in
    --macosx)
      build_macosx=true
      build_iphoneos=false
      build_iphonesimulator=false
      ;;
    --iphoneos)
      build_macosx=false
      build_iphoneos=true
      build_iphonesimulator=false
      ;;
    --iphonesimulator)
      build_macosx=false
      build_iphoneos=false
      build_iphonesimulator=true
      ;;
    *)
      echo >&2 "Unknown option '$opt'"
      exit 1
      ;;
  esac
done

mkdir -p .build

build_openssl

if ninja_path="$(command -v ninja)"; then
  echo "Configuring CMake to use Ninja (found at path $ninja_path)"
  cmake_configure_opts+=(-G Ninja)
fi

build_libgit2
